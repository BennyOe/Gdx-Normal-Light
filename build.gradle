buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.jlleitschuh.gradle:ktlint-gradle:12.2.0"

  }
}

plugins {
  id 'pl.allegro.tech.build.axion-release' version '1.18.7'
}

tasks.register('publishForRelease') {
  // For testing, we publish to the local maven repository.
  // For a real release, this should be ':core:publish'.
  // use this command to publish to the local maven repository:  ./gradlew release -Prelease.push=false -Prelease.localOnly=true
//  dependsOn ':core:publishToMavenLocal'

  // For a real release, this should be ':core:publish'.
  dependsOn ':core:publish'

  // This task should only run when the release task is executed.
  onlyIf { project.hasProperty('release.version') }

  doFirst {
    println "Running publish for release..."
  }
}

scmVersion {
  tag {
    prefix = ''
    versionSeparator = ''
  }
}

// Configure the release task from the plugin to run our publish task after it completes.
tasks.named('release') {
  finalizedBy 'publishForRelease'
}

group = 'io.github.bennyOe'

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'kotlin'
  apply plugin: 'org.jlleitschuh.gradle.ktlint'
  sourceCompatibility = 8

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
  compileKotlin.compilerOptions.jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_1_8)
  compileTestKotlin.compilerOptions.jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_1_8)

}

subprojects {
  version = scmVersion.version
  ext.appName = 'NormalMap'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'NormalMap' + '-parent'
